import logging
import sys
import os
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    sys.exit("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

LATEX, FOIL_FORM, FOIL_SIZE, FOIL_PRICE, FIGURE_HEIGHT, FIGURE_WIDTH, FIGURE_PRICE, LATEX_SIZE, LATEX_PRICE = range(9)

CHANNEL = "@maxdecorkrd"

latex_sizes = {
    '5': 0.002, '10': 0.009, '12': 0.015, '14': 0.024, '18': 0.056, '24': 0.142, '36': 0.4
}

foil_coeffs = {
    ('–∫—Ä—É–≥', '18"'): 0.0145, ('—Å–µ—Ä–¥—Ü–µ', '18"'): 0.0125, ('–∑–≤–µ–∑–¥–∞', '18"'): 0.011,
    ('–∫—Ä—É–≥', '30"'): 0.0365, ('—Å–µ—Ä–¥—Ü–µ', '30"'): 0.0315, ('–∑–≤–µ–∑–¥–∞', '30"'): 0.0275,
    ('–∫—Ä—É–≥', '32"'): 0.041, ('—Å–µ—Ä–¥—Ü–µ', '32"'): 0.036, ('–∑–≤–µ–∑–¥–∞', '32"'): 0.031,
    ('–∫—Ä—É–≥', '36"'): 0.0525, ('—Å–µ—Ä–¥—Ü–µ', '36"'): 0.047, ('–∑–≤–µ–∑–¥–∞', '36"'): 0.042
}

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL, user_id=update.effective_user.id)
        return member.status not in ('left', 'kicked')
    except Exception:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_subscription(update, context):
        await update.message.reply_text(
            "üö´ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ú–∞–∫—Å–î–µ–∫–æ—Ä @maxdecorkrd.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    reply_keyboard = [['–õ–∞—Ç–µ–∫—Å–Ω—ã–π', '–§–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–§–∏–≥—É—Ä–∞']]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–ª–∏—è –≤ —à–∞—Ä–∞—Ö.\nüéà –í—ã–±–µ—Ä–∏ —Ç–∏–ø —à–∞—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return LATEX

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    context.user_data.clear()
    context.user_data['type'] = text
    if text == '–ª–∞—Ç–µ–∫—Å–Ω—ã–π':
        reply_keyboard = [[size for size in latex_sizes.keys()]]
        await update.message.reply_text("üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–∞—Ç–µ–∫—Å–Ω–æ–≥–æ —à–∞—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
        return LATEX_SIZE
    elif text == '—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π':
        await update.message.reply_text("üî∂ –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–∞ (–∫—Ä—É–≥, —Å–µ—Ä–¥—Ü–µ, –∑–≤–µ–∑–¥–∞):")
        return FOIL_FORM
    elif text == '—Ñ–∏–≥—É—Ä–∞':
        await update.message.reply_text("üìê –í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Ñ–∏–≥—É—Ä—ã –≤ —Å–º:")
        return FIGURE_HEIGHT
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return LATEX

async def get_latex_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    size = update.message.text.strip()
    if size in latex_sizes:
        context.user_data['size'] = size
        await update.message.reply_text(f"‚úÖ –†–∞–∑–º–µ—Ä {size} –≤—ã–±—Ä–∞–Ω.\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–ª–ª–æ–Ω–∞ –≥–µ–ª–∏—è 5.25 –º¬≥:")
        return LATEX_PRICE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return LATEX_SIZE

async def get_foil_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    form = update.message.text.strip().lower()
    if form in ['–∫—Ä—É–≥', '—Å–µ—Ä–¥—Ü–µ', '–∑–≤–µ–∑–¥–∞']:
        context.user_data['form'] = form
        await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à–∞—Ä–∞ (18, 30, 32, 36):")
        return FOIL_SIZE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FOIL_FORM

async def get_foil_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    size = update.message.text.strip()
    if size in ['18', '30', '32', '36']:
        context.user_data['size'] = size + '"'
        await update.message.reply_text(f"‚úÖ –†–∞–∑–º–µ—Ä {size}\" –≤—ã–±—Ä–∞–Ω.\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–ª–∏—è –≤ –±–∞–ª–ª–æ–Ω–µ 40–ª 5.25 –º¬≥:")
        return FOIL_PRICE
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FOIL_SIZE

async def get_figure_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = float(update.message.text.strip())
        context.user_data['height'] = height
        await update.message.reply_text("‚ÜîÔ∏è –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ñ–∏–≥—É—Ä—ã –≤ —Å–º:")
        return FIGURE_WIDTH
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—Å–æ—Ç—ã.")
        return FIGURE_HEIGHT

async def get_figure_width(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        width = float(update.message.text.strip())
        context.user_data['width'] = width
        await update.message.reply_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–ª–∏—è –≤ –±–∞–ª–ª–æ–Ω–µ 40–ª 5.25 –º¬≥:")
        return FIGURE_PRICE
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —à–∏—Ä–∏–Ω—ã.")
        return FIGURE_WIDTH

def estimate_foil_figure_volume(height_cm, width_cm):
    thickness_ratio = 0.10
    shape_coefficient = 0.68
    helium_tank_volume_m3 = 5.25

    thickness_cm = height_cm * thickness_ratio
    volume_cm3 = height_cm * width_cm * thickness_cm * shape_coefficient
    volume_liters = volume_cm3 / 1000
    volume_m3 = volume_liters / 1000
    figure_count = int(helium_tank_volume_m3 // volume_m3)

    return round(volume_liters, 2), round(volume_m3, 5), figure_count

async def calculate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text)
        balloon_volume = 5.25
        user_data = context.user_data

        if user_data['type'] == '–ª–∞—Ç–µ–∫—Å–Ω—ã–π':
            coeff = latex_sizes[user_data['size']]
            helium_cost = price / (balloon_volume / coeff)
            count = balloon_volume / coeff
            await update.message.reply_text(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–ª–∏—è –Ω–∞ 1 —à–∞—Ä: {helium_cost:.2f} —Ä—É–±.\nüéà –ú–æ–∂–Ω–æ –Ω–∞–¥—É—Ç—å {count:.0f} —à–∞—Ä–æ–≤.\n\nüîÅ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove())

        elif user_data['type'] == '—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π':
            key = (user_data['form'], user_data['size'])
            if key in foil_coeffs:
                coeff = foil_coeffs[key]
                helium_cost = price / (balloon_volume / coeff)
                count = balloon_volume / coeff
                await update.message.reply_text(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–ª–∏—è –Ω–∞ 1 —à–∞—Ä: {helium_cost:.2f} —Ä—É–±.\nüéà –ú–æ–∂–Ω–æ –Ω–∞–¥—É—Ç—å {count:.0f} —à–∞—Ä–æ–≤.\n\nüîÅ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
                    reply_markup=ReplyKeyboardRemove())
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ —Ä–∞–∑–º–µ—Ä–∞.")

        elif user_data['type'] == '—Ñ–∏–≥—É—Ä–∞':
            vol_liters, vol_m3, count = estimate_foil_figure_volume(user_data['height'], user_data['width'])
            helium_cost = price * (vol_m3 / balloon_volume)
            await update.message.reply_text(
                f"\nüì¶ –û–±—ä—ë–º —Ñ–∏–≥—É—Ä—ã: {vol_liters} –ª–∏—Ç—Ä–æ–≤ ({vol_m3} –º¬≥)\nüéà –ú–æ–∂–Ω–æ –Ω–∞–¥—É—Ç—å {count} —Ñ–∏–≥—É—Ä.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–ª–∏—è –Ω–∞ 1 —Ñ–∏–≥—É—Ä—É: {helium_cost:.2f} —Ä—É–±.\n\nüîÅ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove())
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    return ConversationHandler.END

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LATEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_type)],
            FOIL_FORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_foil_form)],
            FOIL_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_foil_size)],
            FOIL_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)],
            FIGURE_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_figure_height)],
            FIGURE_WIDTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_figure_width)],
            FIGURE_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)],
            LATEX_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_latex_size)],
            LATEX_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)],
            ConversationHandler.END: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(conv_handler)
    app.run_polling()
